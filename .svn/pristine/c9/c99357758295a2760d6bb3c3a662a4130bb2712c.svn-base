package cn.fxdata.tv.activity;

import java.util.HashMap;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.TextUtils;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import cn.fxdata.tv.R;
import cn.fxdata.tv.base.BaseTitleBarActivity;
import cn.fxdata.tv.base.BaseUserActivity.StringFormatUtil;
import cn.fxdata.tv.bean.LoginInfoReturn;
import cn.fxdata.tv.bean.LoginInfoReturn.LoginInfo;
import cn.fxdata.tv.utils.Log;
import cn.fxdata.tv.utils.StringUtils;

import com.android.volley.Listener;
import com.android.volley.VolleyError;
import com.zgntech.core.listener.VolleyListener;
import com.zgntech.core.listener.VolleyListener.VolleyJsonCallBack;

public class SearchPwActivity extends BaseTitleBarActivity implements
        OnClickListener {
    private static final String ACTIVITY_TAG = null;
    private static String bug = null;
    private ImageView back, right2;
    private Button next;
    private TextView tv_show, tv_title, getCode;
    private EditText Phone, verify_code;
    private String mobileNumber, code;
    private int num = 60;
    private Handler handler = new Handler();
    private LoginInfo info;

    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_searchpw);
        initview();
    }

    private void initview() {
        tv_title = (TextView) findViewById(R.id.title);
        tv_title.setText("找回密码");
        back = (ImageView) findViewById(R.id.iv_left);
        back.setOnClickListener(this);
        next = (Button) findViewById(R.id.next);
        next.setOnClickListener(this);
        right2 = (ImageView) findViewById(R.id.iv_right2);
        right2.setVisibility(right2.GONE);
        Phone = (EditText) findViewById(R.id.phone);
        Phone.setOnClickListener(this);
        verify_code = (EditText) findViewById(R.id.verify_code);
        verify_code.setOnClickListener(this);

        tv_show = (TextView) findViewById(R.id.tv_show);
        getCode = (TextView) findViewById(R.id.sendverify_code);
        getCode.setOnClickListener(this);
        // 根据状态改颜色（手动）
        tv_show.setGravity(Gravity.CENTER);
        String wholeStr = "确认账号······修改密码······完成";
        StringFormatUtil spanStr = new StringFormatUtil(this, wholeStr, "确认账号",
                R.color.text_red_color).fillColor();
        tv_show.setText(spanStr.getResult());
    }

    private void setMsgcodeView() {
        getCode.setText(num + "s  重新发送");
        getCode.setEnabled(false);
        num = 60;
        runnable.run();
    }

    Runnable runnable = new Runnable() {

        @Override
        public void run() {
            if (num != 0) {
                getCode.setText(num-- + "s  重新发送");
                handler.postDelayed(runnable, 1 * 1000);
            } else {
                getCode.setEnabled(true);
                getCode.setText("重新发送");
            }
        }
    };

    /**
     * 用手机号码获取短信验证码
     */
    private void getMsgCodeWithPhone() {

        mobileNumber = Phone.getText().toString();

        if (TextUtils.isEmpty(mobileNumber)) {
            // setToast("请输入您的手机号码");
            final String s1 = "请输入您的手机号码";
            Toast t1 = Toast.makeText(getApplicationContext(), s1, 1);
            t1.show();
            Log.i(SearchPwActivity.ACTIVITY_TAG, "请输入您的手机号码 ");
            return;
        } else if (!StringUtils.isPhone(mobileNumber)) {
            // setToast("请您输入正确的手机号码");
            mobileNumber = null;
            final String s2 = "请输入正确的手机号码";
            Toast t2 = Toast.makeText(getApplicationContext(), s2, 1);
            t2.show();
            Log.i(SearchPwActivity.ACTIVITY_TAG, "请输入正确的手机号码");
        } else {
            sendMobileForCode(mobileNumber);

        }
    }

    /**
     * 请求获取短信验证码
     * 
     * @param mobileNumber
     */
    private void sendMobileForCode(String mobileNumber) {

        Map<String, String> param = new HashMap<String, String>();
        param.put("mobile", mobileNumber);
        param.put("type", "regist");
        param.put("ac", "sendCode");
        showDialog("正在获取验证码");

        sendVolleyRequest(param, new Listener<String>() {
            @Override
            public void onSuccess(String response) {
                dismissDialog();

                JSONObject jsonObject;
                try {
                    jsonObject = new JSONObject(response);
                    if (jsonObject.has("data")) {
                        jsonObject = jsonObject.getJSONObject("data");
                        // messageCode = jsonObject.getInt("code") + "";
                        setMsgcodeView();
                    } else {
                        String error_msg = jsonObject.getString("error_msg");
                        // mobileNumber = null;
                        if (!TextUtils.isEmpty(error_msg)) {
                            // setToast(error_msg);
                            // Log.i(ACTIVITY_TAG, bug);
                        }
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onError(VolleyError error) {
                dismissDialog();
                showHttpError(error.getMessage());

            }
        });

    }

    /**
     * 请求验证短信验证码
     * 
     * @param mobileNumber
     * @param code
     */
    private void sendMobileForVerify(String mobileNumber, String code) {
        Map<String, String> param = new HashMap<String, String>();
        param.put("mobile", mobileNumber);
        param.put("code", code);
        param.put("ac", "verifyCode");
        showDialog("正在验证");

        sendVolleyRequest(param, new VolleyListener(LoginInfoReturn.class,
                new VolleyJsonCallBack() {

                    @Override
                    public void onResonpse(Object object) {
                        // dismissDialog();
                        destroyProgressDialog();
                        LoginInfoReturn loginInfoReturn = (LoginInfoReturn) object;
                        VerifySuccess(loginInfoReturn.getData());
                        loginInfoReturn = null;
                    }

                    @Override
                    public void onError(int errorCode, String errorMsg) {
                        // TODO Auto-generated method stub
                        dismissDialog();
                        Log.i(ACTIVITY_TAG, "pppppppppppppppppppppp");
                        finish();
                        // showHttpError(error.getMessage());

                    }
                }));

    }

    private void VerifySuccess(LoginInfoReturn.LoginInfo info) {
        Intent intent = new Intent();
        intent.setClass(SearchPwActivity.this, SearchPwModfiyActivity.class);
        intent.putExtra("phone", Phone.getText().toString());
        startActivity(intent);
    }

    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
        switch (v.getId()) {
        case R.id.iv_left:
            finish();
            break;
        case R.id.next:
            code = verify_code.getText().toString();
            sendMobileForVerify(mobileNumber, code);
            break;
        case R.id.sendverify_code:
            if (StringUtils.isNullOrEmpty(mobileNumber)) {
                getMsgCodeWithPhone();
            } else {
                sendMobileForCode(mobileNumber);
            }

            break;
        default:
            break;
        }
    }

}


package cn.fxdata.tv.view;

import cn.fxdata.tv.R;
import android.content.Context;
import android.graphics.drawable.Drawable;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnFocusChangeListener;
import android.view.animation.Animation;
import android.view.animation.CycleInterpolator;
import android.view.animation.TranslateAnimation;
import android.widget.EditText;

/**
 * @description :TODO<搜索框>
 * @author: lyu
 * @date:2015-5-4
 * @version:V1.0
 */
public class SearchEditText extends EditText {
    /**
     * 搜索按钮的引用
     */
    private Drawable mSearchDrawable;
    private SearchClickListener searchClickListener;

    public SearchEditText(Context context) {
        this(context, null, android.R.attr.editTextStyle);
        init();
    }

    public SearchEditText(Context context, AttributeSet attrs) {
        // 这里构造方法也很重要，不加这个很多属性不能再XML里面定义
        this(context, attrs, android.R.attr.editTextStyle);
    }

    public SearchEditText(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        init();
    }

    public void setSearchClickListener(SearchClickListener searchClickListener) {
        this.searchClickListener = searchClickListener;
    }

    private void init() {
        // 获取EditText的DrawableRight,假如没有设置我们就使用默认的图片
        mSearchDrawable = getCompoundDrawables()[0];
        if (mSearchDrawable == null) {
            // throw new
            // NullPointerException("You can add drawableRight attribute in XML");
            mSearchDrawable = getResources().getDrawable(R.drawable.icon_search);
        }

        mSearchDrawable.setBounds(0, 0, mSearchDrawable.getIntrinsicWidth(),
                mSearchDrawable.getIntrinsicHeight());
    }

    /**
     * 因为我们不能直接给EditText设置点击事件，所以我们用记住我们按下的位置来模拟点击事件 当我们按下的位置 在 EditText的宽度 -
     * 图标到控件右边的间距 - 图标的宽度 和 EditText的宽度 - 图标到控件右边的间距之间我们就算点击了图标，竖直方向就没有考虑
     */
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_UP) {
            if (getCompoundDrawables()[0] != null) {

                boolean touchable = event.getX() > (getWidth() - getTotalPaddingRight())
                        && (event.getX() < ((getWidth() - getPaddingRight())));

                if (touchable) {
                    if (searchClickListener != null)
                        searchClickListener.onSearchClick();
                }
            }
        }

        return super.onTouchEvent(event);
    }

    public interface SearchClickListener {
        void onSearchClick();
    }

    /**
     * 设置晃动动画
     */
    public void setShakeAnimation() {
        this.setAnimation(shakeAnimation(5));
    }

    /**
     * 晃动动画
     * 
     * @param counts 1秒钟晃动多少下
     * @return
     */
    public static Animation shakeAnimation(int counts) {
        Animation translateAnimation = new TranslateAnimation(0, 10, 0, 0);
        translateAnimation.setInterpolator(new CycleInterpolator(counts));
        translateAnimation.setDuration(1000);
        return translateAnimation;
    }

}


package cn.fxdata.tv.base;

import java.net.URLEncoder;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import cn.fxdata.tv.R;
import cn.fxdata.tv.application.FxApplication;
import cn.fxdata.tv.bean.LoginInfoReturn.LoginInfo;
import cn.fxdata.tv.constants.Constants;
import cn.fxdata.tv.http.VolleyRequestManager;
import cn.fxdata.tv.utils.SharePreferencePersonUtil;
import cn.fxdata.tv.utils.StringUtils;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnKeyListener;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.alibaba.fastjson.JSONObject;
import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Listener;
import com.android.volley.Request.Method;
import com.android.volley.RetryPolicy;
import com.android.volley.VolleyTools;
import com.zgntech.core.util.SystemTool;
import com.zgntech.core.util.T;
import com.zgntech.core.util.UiTools;

/**
 * @description：TODO<请描述这个类是干什么>
 * @author：lyu
 * @date:2015-5-11
 * @version：V1.0
 */
public class BaseFragment extends Fragment {

    protected ProgressDialog dialog;
    private Context context = null;
    private String userId;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        context = getActivity();
        createProgressDialog();
    }
    
    /** 是否需要加载数据的标志，true表示需要加载，加载完成后置为false */
    private boolean isFirstLoad = true;
    
    /** 判断是否需要加载数据 */
    protected synchronized boolean isShouldLoadData() {
        return isFirstLoad;
    }
    
    /** 设置加载标志 */
    protected synchronized void setFirstLoad(boolean firstLoad) {
        this.isFirstLoad = firstLoad;
    }
    
    /**
     * 只有在进入页面时才开始加载数据，子类实现具体逻辑
     */
    public void loadData() {
        initUserId();
    };
    
    /** 初始化userId */
 public void initUserId() {
     if (StringUtils.isNullOrEmpty(userId)) {
         getUserId();
     }
 }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // TODO Auto-generated method stub
        return super.onCreateView(inflater, container, savedInstanceState);
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
    }

    public void showActivity(Class<?> cls) {
        context.startActivity(new Intent(context, cls));
    }

    public void showActivity(Class<?> cls, Bundle bundle) {
        Intent intent = new Intent(getActivity(), cls);
        intent.putExtras(bundle);
        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
        context.startActivity(intent);
    }

    /**
     * @param cls
     * @param requestCode
     */
    public void showActivityForResult(Class<?> cls, int requestCode) {
        startActivityForResult(new Intent(context, cls), requestCode);
    }

    /**
     * @param cls
     * @param requestCode
     * @param bundle
     */
    public void showActivityForResult(Class<?> cls, int requestCode, Bundle bundle) {
        Intent intent = new Intent(context, cls);
        intent.putExtras(bundle);
        intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
        startActivityForResult(intent, requestCode);
    }

    protected void showToast(String msg) {
        T.toast(msg);
    }

    protected void showToast(int id) {
        T.toast(id);
    }

    /**
     * 获取 用户Id
     * @return
     */
    public String getUserId() {
        if (StringUtils.isNullOrEmpty(userId)) {
            userId = new SharePreferencePersonUtil(getContext()).getPersonUserId();
            if (StringUtils.isNullOrEmpty(userId)) {
                LoginInfo info = ((FxApplication) getActivity().getApplication()).getLoginInfo();
                if (info != null)
                    userId = info.getUser_id();
            }
        }
        return userId;
    }

    public Context getContext() {

        if (context == null) {
            context = getActivity().getApplicationContext();
        }
        return context;
    }

    private void createProgressDialog() {
        if (dialog != null && dialog.isShowing()) {
            destroyProgressDialog();
        }
        dialog = UiTools.getDialog(context);
        dialog.setOnKeyListener(new OnKeyListener() {

            @Override
            public boolean onKey(DialogInterface arg0, int arg1, KeyEvent event) {
                if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {// 返回
                    VolleyTools.getInstance(context).cancelPendingRequests();
                }
                return false;
            }
        });
    }

    /**
     * 关闭Dialog对象
     */
    public void destroyProgressDialog() {
        if (dialog != null)
            dialog.dismiss();
        dialog = null;
    }


    /** volley相关的汉字编码 */
    public void sendVolleyRequestWithEncode(Map<String, String> params,
            Listener<String> requestListener) {
        if (checkNet()) {
//            sendRequestWithEncode(params, requestListener);
        }
    }

    /**
     * 发送请求
     * 
     * @param params
     * @param requestListener
     * @param errorListener
     */
//    public void sendRequest(Map<String, String> params, Listener<String> requestListener) {
//
//        Map<String, String> reqParams = getReqParam(params);
//        StringParamsRequest request = new StringParamsRequest(Method.POST,
//                "", requestListener,
//                reqParams);
//        request.setRetryPolicy(getRetryPolicy());
//        VolleyTools.getInstance(context).addToRequestQueue(request);
//    }

    /**
     * 发送编码的请求，带有用户自己输入文字的参数
     * 
     * @param params
     * @param requestListener
     * @param errorListener
     */
//    public void sendRequestWithEncode(Map<String, String> params,
//            Listener<String> requestListener) {
//
//        Map<String, String> reqParams = getReqParam(null);
//        StringParamsRequest request = new StringParamsRequest(Method.POST,
//                "", requestListener,
//                reqParams, params);
//        request.setRetryPolicy(getRetryPolicy());
//        VolleyTools.getInstance(context).addToRequestQueue(request);
//    }

    /**
     * volley请求 默认设置
     */
    protected RetryPolicy getRetryPolicy() {
        return new DefaultRetryPolicy(30000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
    }

    /**
     * 获取公共参数
     * 
     * @param pageParam
     * @return
     */
    protected Map<String, String> getReqParam(Map<String, String> pageParam) {

        Map<String, String> param = new HashMap<String, String>();
        String timestamp = String.valueOf(new Date().getTime());
        param.put("platform", "Android");
        // param.put("version", StringUtil.getVersion(getContext()));
        param.put("source", "APP");
        param.put("timestamp", timestamp);
        param.put("token", "");
        param.put("udid", "");
        // String privateCode = new
        // SharePreferencePersonUtil(getContext()).getPersonUserPrivateCode();
        // if (false == TextUtils.privateCode)) {
        param.put("private_code", URLEncoder.encode(""));
        // }
        if (pageParam != null) {
            for (String iterable_element : pageParam.keySet()) {
                param.put(iterable_element, pageParam.get(iterable_element));
            }
        }
        return param;
    }

    /**
     * 检测网络 /无网络则取消dialog
     * 
     * @return
     */
    public boolean checkNet() {
        if (SystemTool.checkNet(context)) {
            return true;
        }
        if (dialog.isShowing()) {
            dialog.dismiss();
        }
        T.toast(R.string.network_unavailable);
        return false;
    }
}

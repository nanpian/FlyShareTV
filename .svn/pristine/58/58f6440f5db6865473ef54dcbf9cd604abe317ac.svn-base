
package cn.fxdata.tv.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Listener;
import com.android.volley.RetryPolicy;
import com.android.volley.VolleyError;
import com.android.volley.VolleyTools;
import com.android.volley.Request.Method;
import com.android.volley.request.StringRequest;
import com.google.gson.reflect.TypeToken;
import com.zgntech.core.util.UiTools;
import com.zgntech.core.view.pullrefresh.PullToRefreshBase;
import com.zgntech.core.view.pullrefresh.PullToRefreshListView;
import com.zgntech.core.view.pullrefresh.PullToRefreshBase.OnRefreshListener;

import cn.fxdata.tv.R;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;
import android.widget.Toast;
import cn.fxdata.tv.adapter.CommentAdapter;
import cn.fxdata.tv.base.BaseActivity;
import cn.fxdata.tv.bean.MovieDetail;
import cn.fxdata.tv.constants.Constants;
import cn.fxdata.tv.http.VolleyRequestManager;
import cn.fxdata.tv.utils.MJsonUtil;

/**
 *  预告详情页面
 */

public class ForcastVideoDetailActivity extends BaseActivity implements OnCheckedChangeListener, OnClickListener {
	private static final String TAG = "forcastvideodetail";
    private ListView commentListView;
    private CommentAdapter adapter;
    private List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();
    private ScrollView scrollview;
    private ImageView backImageView;
    private Button sendButton;
    private EditText commentEditText;
    private TextView movieEndTimeUI;
    private Button movieWarnMeUI;
    private TextView movieNameUI;
    private CheckBox movieFollowUI;
    private TextView movieAreaOldUI;
    private TextView movieTypeUI;
    private TextView movieDetailUI;
    private Context context;
    private String movieId;
    private String movieName;
    private String movieType;
    private String movieArea;
    private boolean isMovieRemarked;
    private String movieDetail;
    private PullToRefreshListView pullToRefreshListView;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        context = this;
        setContentView(R.layout.act_video_forcast_detail);
        
        movieEndTimeUI = (TextView)findViewById(R.id.movie_end_time);
        movieWarnMeUI = (Button)findViewById(R.id.btn_warn_me);
        movieWarnMeUI.setOnClickListener(this);
        movieWarnMeUI.setTag(false);
        movieNameUI = (TextView)findViewById(R.id.name);
        movieFollowUI = (CheckBox)findViewById(R.id.btn_follow_me);
        movieFollowUI.setOnCheckedChangeListener(this);
        movieTypeUI = (TextView)findViewById(R.id.movie_type);
        movieAreaOldUI = (TextView)findViewById(R.id.movie_old_area);
        movieDetailUI = (TextView)findViewById(R.id.movie_type);
        
        // 得到上下拉刷新的view
        pullToRefreshListView = (PullToRefreshListView)findViewById(R.id.frag_fornotice_comment_listview);
        // 从上下拉刷新view中得到listview
        commentListView = pullToRefreshListView.getRefreshableView();
        // 设置一些listview属性，比如分割线为透明
        commentListView.setFadingEdgeLength(0);
        commentListView.setDividerHeight(0);
        commentListView.setSelector(getResources().getDrawable(R.drawable.transparent));
        
        //上下拉刷新view上下拉回调
        pullToRefreshListView.setOnRefreshListener(new OnRefreshListener<ListView>() {
            // 下拉回调，得到第一页评论数据
            @Override
            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {
                refreshCommentData();
            }
            // 上拉回调，得到更多的评论数据
            @Override
            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {
                //loadMoreCommentData();
            }
        });
        // 进入首页，就进行第一次刷新评论数据
        pullToRefreshListView.doPullRefreshing(true, Constants.DEFAULT_VALUE.DEFAULT_LIST_LAOD_DELAYMILLIS);

        scrollview = (ScrollView) findViewById(R.id.mScrollView);
        backImageView = (ImageView) findViewById(R.id.btn_back);
        backImageView.setOnClickListener(this);
        sendButton = (Button) findViewById(R.id.btn_send);
        sendButton.setOnClickListener(this);
        commentEditText = (EditText) findViewById(R.id.comment_edit);
        commentEditText.setOnEditorActionListener(new OnEditorActionListener(){
			@Override
			public boolean onEditorAction(TextView v, int actionId,
					KeyEvent event) {
				if(actionId == EditorInfo.IME_ACTION_SEND ){
					sendText(v.getText().toString());
					return true;
				}
				return false;
			}});
                
        adapter = new CommentAdapter(this, data);
        commentListView.setAdapter(adapter);
        UiTools.setListViewHeightBasedOnChildren(commentListView);
        scrollview.smoothScrollTo(0, 0);
    }
    
    @Override
    public void onResume(){
    	super.onResume();
    	
    	Intent i = getIntent();
    	if(i.hasExtra(Constants.MovieExtra.EXTRA_MOVIE_ID)){
    		movieId = i.getStringExtra(Constants.MovieExtra.EXTRA_MOVIE_ID);
    		Log.d(TAG,"forcast video movieID: " + movieId);
        	VolleyTools tools = VolleyTools.getInstance(this.getContext());
            tools.addToRequestQueue(new StringRequest(Method.GET, Constants.ServerConfig.PREVIEW_URL + "&movie_id=" + movieId, getMoviePrevListener), ForcastVideoDetailActivity.TAG);
    	}else{
    		Log.e(TAG,"no has extra_movie_id");
    		updateUI(false);
    	}
    }
    
    @Override
    public void onNewIntent(Intent intent){
    	super.onNewIntent(intent);
    	setIntent(intent);
    }

	@Override
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public void onClick(View v) {
		switch(v.getId()){
			case R.id.btn_warn_me:
				boolean isChecked = (Boolean)v.getTag();
				if(isChecked){
					// 不在提醒这个电影
					((Button)v).setText(R.string.fv_warn_me);
					//do something
					
				}else{
					//提醒这个电影
					((Button)v).setText(R.string.fv_had_warned);
					//do something
					
				}
				v.setTag(!isChecked);
				break;
			case R.id.btn_back: //返回
                Log.d(TAG, "back onClick");
                finish();
				break;
			case R.id.btn_send:
                String send = commentEditText.getEditableText().toString();
                sendText(send);
				break;
		}
	}
	
	
    /** volley请求封装，用于刷新评论数据*/
    public void sendVolleyRequest(Map<String, String> params, Listener<String> listener) {
        if (checkNet()) {
            Map<String, String> reqParams = getReqParam(params);
            com.zgntech.core.util.StringParamsRequest request = new com.zgntech.core.util.StringParamsRequest(Method.GET, Constants.ServerConfig.COMMENT_LIST_URL, listener, reqParams);
            //request.setRetryPolicy(getRetryPolicy());
            VolleyRequestManager.getInstance().addRequest(request, this);
        }
    }
    
    /**
     * 用上下拉view的下拉刷新通过Volley请求获取电影评论数据
     */
    private void refreshCommentData() {
        Map<String, String> param = new HashMap<String, String>();
        param.put("user_id", getUserId());
        param.put("page", "1");
        param.put("records", "10");
        param.put("movie_id", movieId);
        sendVolleyRequest(param, new Listener<String>() {

            @Override
            public void onSuccess(String response) {
                Log.d(TAG, "The response data string -- >> " + response);
            }
            
            public void onError(VolleyError error) {
                Log.d(TAG, "The response data string -- >> " + error.toString());
            }
            
        });
    }
    
    /**
     * volley请求的重试策略
     */
    protected RetryPolicy getRetryPolicy() {
        return new DefaultRetryPolicy(30000, DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
    }
	
	private void sendText(String send){
		if(TextUtils.isEmpty(send)){
			Toast.makeText(context, "发送内容不能未空", Toast.LENGTH_SHORT).show();
			return;
		}
		Toast.makeText(context, "评论成功: send", 1000).show();
	}
	
	private void updateUI(boolean success){
		if(success){
			movieEndTimeUI.setText(this.getString(R.string.fv_end_time, "06:12:21"));
			movieNameUI.setText(movieName);
			movieAreaOldUI.setText(this.getString(R.string.fv_video_old_position, "2014", movieArea));
			movieTypeUI.setText(this.getString(R.string.fv_video_type, movieType));
			movieDetailUI.setText(this.getString(R.string.fv_video_content, movieDetail));
			if(isMovieRemarked){
				movieWarnMeUI.setText(R.string.fv_had_warned);
				movieWarnMeUI.setTag(true);
			}else{
				movieWarnMeUI.setText(R.string.fv_warn_me);
				movieWarnMeUI.setTag(false);
			}
		}
	}
	private Listener<String> getMoviePrevListener = new Listener<String>() {
        @Override
        public void onSuccess(String response) {
            Log.d(TAG, "the response --> " + response);       
            MovieDetail movie = MJsonUtil.gson.fromJson(response, new TypeToken<MovieDetail>() {}.getType());            
            if(movie.getError_code() == 0){
            	MovieDetail.MovieDetailData data = movie.getDetail();
            	movieName = data.getName();
            	movieType = data.getType();
            	movieArea = data.getArea();
            	movieDetail = data.getDetail();
            	isMovieRemarked = data.getRemark();
            	updateUI(true);
            }else{
            	Log.e(TAG, movie.getError_msg());
            	updateUI(false);
            }
        }

        @Override
        public void onError(VolleyError error) {
            super.onError(error);
            Log.d(TAG, "the response --> " + error.toString());
            updateUI(false);
        }

        @Override
        public void onCancel() {
            super.onCancel();
            Log.d(TAG, "cancelled");
        }
	};

}
